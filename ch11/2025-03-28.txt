Redux 아키텍쳐

redux개념은 flutter에도있다. 이거 이해하면 다른거 너무 쉬움.
예전엔 store를 여러개 만들수 있또록 허용했다.
redux => 스토어 하나만 쓰고, reducer를 사용해서 바꿔줘라.

redux : 불변성 필수 -> 상태변경 추적
api <-> action creaters -(dispatch)-> store <-> reducer (트리 구조, 다중 reducer) : store에 newState리턴 -> View에 바인딩 -> 7.액션 생성자 호출
dispatch(ActionCreater (...)) 리턴받은 액션메시지를 dispatch

어려워서 적용 안한다가 대부분임.


react-redux 라이브러리가 있다. 구독개념이 있음.
과거는 connect() 이었고, 지금은 훅을 사용해서 useSelector()를 사용한다. (함수형 컴포넌트)

컨테이너 컴포넌트
	||
	V
표현 컴포넌트

redux-toolkit 사용 권장 함.(툴킷 사용안하는거 deprecated시켰다)
전역으로 관리해야 할상태 (여러화면에서 공유, 한화면에서 쓰이지만 다른화면 갓다가 다시오면 유지되는 그런 상태 -> 중앙집중화 하면된다.[공통으로 관리할 상태 도출])
설계문서 만들어서 산출물로남겨라. (상태와 상태변경기능이 도출되었다)


Reducer에는 절대 비동기가 들어가면안됨.
리덕스 툴킷에 thunk가 내장되어 있다.
redux-thunk는 비동기 처리를 위한 redux용 Middle ware

[1] dispatch(action)
[2] action이 thunk이냐 ? 분기
// pseudo code
if (action is thunk)
  thunk() -> 비동기 처리 시작 -> 처리결과 반환
else 
  next(action) -> 리듀서 -> ㄴㅅㅁㅅㄷ

리덕스는 컨테이너 만들어서 관리해서 재사용성이 좋다.
Zustand는 아님. ㅣ거밖에 못씀 별로 좋지 않음.